#+TITLE:  Aliases for Elvish
#+AUTHOR: Diego Zamboni
#+EMAIL:  diego@zzamboni.org

Implementation of aliases for [[http://elvish.io][Elvish]].

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy
to explain. See [[alias.elv][alias.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#configuration][Configuration]]
  - [[#creating-aliases][Creating aliases]]
  - [[#listing-aliases][Listing aliases]]
  - [[#removing-aliases][Removing aliases]]
  - [[#load-time-initialization][Load-time initialization]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/alias
#+end_src

To define an alias:

#+begin_src elvish
  alias:new alias command
#+end_src

You can also use =alias:bash_alias= to use the bash syntax
=alias=command= for defining aliases.

Each alias is stored in a separate file under =$alias:dir=
(=~/.elvish/aliases/= by default).

To list existing aliases:

#+begin_src elvish
  alias:list
#+end_src

To remove an alias:

#+begin_src elvish
  alias:rm alias
#+end_src

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

#+BEGIN_SRC elvish :exports none
  # DO NOT EDIT THIS FILE DIRECTLY
  # This is a file generated from a literate programing source file located at
  # https://github.com/zzamboni/elvish-modules/blob/master/alias.org.
  # You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+END_SRC

** Configuration

The =alias:dir= variable determines where the alias files will be saved.

#+BEGIN_SRC elvish
  dir = ~/.elvish/aliases
#+END_SRC

** Creating aliases

Aliases are defined as functions, which execute the body provided as
the alias definition. After writing the file we load it with the
=-source= command to verify the syntax of the function, and remove the
file if there is an error. =alias:new= is equivalent to =alias:def=.

#+BEGIN_SRC elvish
  fn def [&verbose=false name @cmd]{
    file = $dir/$name.elv
    echo "#alias:def" $name $@cmd > $file
    echo fn $name '[@_args]{' $@cmd '$@_args }' >> $file
    if (not-eq $verbose false) {
      echo (edit:styled "Defining alias "$name green)
    }
    is_ok = ?(-source $file)
    if (not $is_ok) {
      echo (edit:styled "Your alias definition has a syntax error. Please recheck it.\nError: "(echo $is_ok) red)
      rm $file
    }
  }

  fn new [@arg]{ def $@arg }
#+END_SRC

The =alias:bash_alias= command simply splits the arguments on the first
equals sign, and calls =alias:def= with the two pieces.

#+BEGIN_SRC elvish
  fn bash_alias [@args]{
    line = $@args
    name cmd = (splits &max=2 '=' $line)
    def $name $cmd
  }
#+END_SRC

** Listing aliases

To list aliases, we grep the aliases directory for the corresponding
definition files. Each file has a marker at the beginning which
includes the alias definition command. =alias:list= and =alias:ls= are
equivalent.

#+BEGIN_SRC elvish
  fn list {
    _ = ?(grep -h '^#alias:def ' $dir/*.elv | sed 's/^#//')
  }

  fn ls { list } # Alias for list
#+END_SRC

** Removing aliases

Removing an alias is achieved by removing its definition file, and
deleting the corresponding variable so that the change takes effect in
the current session. =alias:rm= and =alias:undef= are equivalent.

Removing the variable is a bit tricky - we need to write the command
to a file and execute it using =-source= to build the variable name
dynamically.

#+BEGIN_SRC elvish
  fn undef [name]{
    file = $dir/$name.elv
    if ?(test -f $file) {
      # Remove the definition file
      rm $file
      # Remove the function in the current session
      tmpf = (mktemp)
      echo  "del "$name"~" > $tmpf
      -source $tmpf
      rm -f $tmpf
      echo (edit:styled "Alias "$name" removed." green)
    } else {
      echo (edit:styled "Alias "$name" does not exist." red)
    }
  }

  fn rm [@arg]{ undef $@arg }
#+END_SRC

** Load-time initialization

The =init= function is run automatically when the module is loaded, but
you can also call it manually if you want to reinitialize the
aliases. It creates the alias directory if needed, and loads all the
alias files to define the corresponding functions.

#+BEGIN_SRC elvish
  fn init {
    if (not ?(test -d $dir)) {
      mkdir -p $dir
    }

    for file [(_ = ?(put $dir/*.elv))] {
      is_ok = ?(-source $file)
      if (not $is_ok) {
        echo (edit:styled "Error when loading alias file "$file" - please check it." red)
      }
    }
  }
#+END_SRC

#+begin_src elvish
  init
#+end_src
