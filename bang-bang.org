#+title: Bang-bang key bindings for Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

Implement the =!!= (last command), =!$= (last argument of last command)
and =!<n>= (nth argument of last command) shortcuts in Elvish.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy
to explain. See [[file:alias.elv][alias.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#configuration][Configuration]]
  - [[#inserting-a-plain-exclamation-mark][Inserting a plain exclamation mark]]
  - [[#bang-bang-mode-function][bang-bang mode function]]
  - [[#initialization][Initialization]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module.

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/bang-bang
#+end_src

When you press =!=, you will see a menu showing you the different
keys your can press, for example, if you try to execute a command that
requires =root= privileges:

#+begin_example
[~]─> ls /var/spool/mqueue/
ls: cannot open directory '/var/spool/mqueue/': Permission denied
Exception: ls exited with 2
Traceback:
  /Users/taazadi1/.elvish/aliases/ls.elv, line 2:
    fn ls [@_args]{ e:ls --color=auto $@_args }
  [tty], line 1:
    ls /var/spool/mqueue/
#+end_example

You can type =sudo= and then press =!=, which will show you the menu:

#+begin_example
[~]─> sudo <!>
bang-lastcmd [A C]
!     ls /var/spool/mqueue/
0     ls
1/$   /var/spool/mqueue/
Alt-! !
#+end_example

If you press =!= a second time, the full command will be inserted at the
point:

#+begin_example
[~]─> sudo ls /var/spool/mqueue/
#+end_example

If you wanted to see the permissions on that directory next, you could
use the =!$= shortcut instead:

#+begin_example
[~]─> ls -ld <!>
bang-lastcmd [A C]
!     sudo ls /var/spool/mqueue/
0     sudo
1     ls
2/$   /var/spool/mqueue/
Alt-! !
#+end_example

Pressing =$= (or =2=) at this point will insert the last argument:

#+begin_example
[~]─> ls -ld /var/spool/mqueue/
#+end_example

By default, =bang-bang:init= (which gets called automatically when the
module loads) also binds the default "lastcmd" key (=Alt-1=), and when
repeated, it will insert the full command. This means it fully
emulates the default [[https://elvish.io/learn/cookbook.html#ui-recipes]["last command"]] behavior. If you want to bind
bang-bang to other keys, you can pass them in a list in the
=&extra-triggers= option to =bang-bang:init=. For example, to bind
bang-bang to =Alt-`= in addition to =!=:

#+begin_src elvish
  bang-bang:init &extra-triggers=["Alt-`"]
#+end_src

By default, =Alt-!= (=Alt-Shift-1=) can be used to insert an exclamation
mark when you really need one. This works both from insert mode or
from "bang-mode" after you have typed the first exclamation mark. If
you want to bind this to a different key, specify it with the
=&plain-bang= option to =bang-bang:init=, like this:

#+begin_src elvish
  bang-bang:init &plain-bang="Alt-3"
#+end_src

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Configuration

If you want hooks to be run either before or after entering bang-bang
mode, you can add them as lambdas to these variables.

#+begin_src elvish
  before-lastcmd = []
  after-lastcmd = []
#+end_src

=$-plain-bang-insert= contains the key that is used to insert a plain =!=,
also after entering lastcmd.  *Do not set directly*, instead pass the
=&plain-bang= option to =init=.

#+begin_src elvish
  -plain-bang-insert = ""
#+end_src

=$-extra-trigger-keys= is an array containing the additional keys that
will trigger bang-bang mode. These keys will also be bound, when
pressed twice, to insert the full last command. *Do not set directly*,
instead pass the =&-extra-triggers= option to =init=.

#+begin_src elvish
  -extra-trigger-keys = []
#+end_src

** Inserting a plain exclamation mark

This function gets bound to the keys specified in =-plain-bang-insert=.

#+begin_src elvish
  fn insert-plain-bang { edit:insert:start; edit:insert-at-dot "!" }
#+end_src

** bang-bang mode function

The =bang-bang:lastcmd= function is the central function of this module.

#+begin_src elvish :noweb no-export
  fn lastcmd {
    <<lastcmd code below>>
  }
#+end_src

First, we run the "before" hooks, if any.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
  for hook $before-lastcmd { $hook }
#+end_src

We get the last command and split it in words for later use.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
  last = (edit:command-history -1)
  parts = [(edit:wordify $last[cmd])]
#+end_src

We create the two "fixed" items of the bang-bang menu: the full
command and the plain exclamation mark. Each menu item is a map with
three keys: =content= is the text to insert when the option is selected,
=display= is the text to show in the menu, and =filter-text= is the text
which can be used by the user to filter options - usually it's the
same as =content=.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
  cmd = [
    &content=     $last[cmd]
    &display=     "! "$last[cmd]
    &filter-text= $last[cmd]
  ]
  bang = [
    &content=     "!"
    &display=     $-plain-bang-insert" !"
    &filter-text= "!"
  ]
#+end_src

We now populate the menu items for each word of the command. For the
last one, we also indicate that it can be selected with =$=.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
  nitems = (count $parts)
  items = [
    (range $nitems |
      each [i]{
        text = $parts[$i]
        if (eq $i (- $nitems 1)) { i = $i"/$" }
        put [
          &content=     $text
          &display=     $i" "$text
          &filter-text= $text
        ]
      }
    )
  ]
#+end_src

Finally, we put the whole list together.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
  candidates = [$cmd $@items $bang]
#+end_src

Now we create a list with the keybindings for the different elements
of the menu.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
  insert-full-cmd = { edit:insert:start; edit:insert-at-dot $last[cmd] }
  insert-part-n = [n]{ edit:insert:start; edit:insert-at-dot $parts[$n] }
  bindings = [
    &!=                   $insert-full-cmd
    &"$"=                 { $insert-part-n -1 }
    &$-plain-bang-insert= $insert-plain-bang~
  ]
  for k $-extra-trigger-keys {
    bindings[$k] = $insert-full-cmd
  }
  range (count $parts) | each [i]{
    bindings[$i] = { $insert-part-n $i }
  }
#+end_src

Finally, we invoke narrow mode with all the information we have put
together, to display the menu and act on the corresponding choice.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
  edit:-narrow-read {
    put $@candidates
  } [arg]{
    edit:insert-at-dot $arg[content]
    for hook $after-lastcmd { $hook }
  } &modeline="bang-bang " &auto-commit=$true &ignore-case=$true &bindings=$bindings
#+end_src

** Initialization

The =init= function gets called to set up the keybindings. This function
can receive two options:

- =&plain-bang= (string) to specify the key to insert a plain exclamation mark
  when needed. Defaults to ="Alt-!"=.
- =&extra-triggers= (array of strings) to specify additional keys (other
  than =!=) to trigger bang-bang mode. All of these keys will also be
  bound, when pressed twice, to insert the full last command (just
  like =!!=). Defaults to =["Alt-1"]=, which emulates the default
  last-command keybinding in Elvish.

#+begin_src elvish
  fn init [&plain-bang="Alt-!" &extra-triggers=["Alt-1"]]{
    -plain-bang-insert = $plain-bang
    -extra-trigger-keys = $extra-triggers
    edit:insert:binding[!] = $lastcmd~
    for k $extra-triggers {
      edit:insert:binding[$k] = $lastcmd~
    }
    edit:insert:binding[$-plain-bang-insert] = $insert-plain-bang~
  }
#+end_src

We call =init= automatically on module load, although you can all it
manually if you want to change the defaults for =plain-bang= or
=extra-triggers=.

#+begin_src elvish
  init
#+end_src
