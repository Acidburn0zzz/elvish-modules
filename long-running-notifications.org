#+title: Notifications for long-running commands in Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

Produce notifications for long-running commands

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy
to explain. See [[file:long-running-notifications.elv][long-running-notifications.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
  - [[#notification-mechanisms][Notification mechanisms]]
- [[#implementation][Implementation]]
  - [[#configuration][Configuration]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module and call the =setup= function:

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/long-running-notifications
  long-running-notifications:setup
#+end_src

Try it out! Run the following command:

#+begin_src elvish
  sleep 11
#+end_src

The default notification threshold is 10 seconds, so when the command
finishes, you will see a notification. The threshold can be changed by
assigning a value in seconds to the =long-running-notifications:threshold=
variable. For example:

#+begin_src elvish
  =long-running-notifications:threshold = 20
#+end_src

** Notification mechanisms

By default, the module tries to determine the best notification method
to use based on available commands. The method can be specified
manually by assigning a lambda to
=$long-running-notifications:notifier=.

Built-in notifiers:

- =$long-running-notifications:macos_notifier= (GUI notifications on
  macOS, used automatically if [[https://github.com/julienXX/terminal-notifier][terminal-notifier]] is available)
- =$long-running-notifications:text_notifier= (used if nothing else
  works)

You can provide your own notification function. It needs to be a
lambda which receives no parameters, but it can make use of the
following variables: =$long-running-notifications:last_cmd= (string
containing the command),
=$long-running-notifications:last_cmd_start_time= (containing the start
time of the command in Unix epoch format) and
=$long-running-notifications:last_cmd_duration= (how long the command
took to run, in seconds). For example:

#+begin_src elvish
  long-running-notifications:notifier = { echo "LONG COMMAND! Lasted "$long-running-notifications:last_cmd_duration }
#+end_src

If you write a new notification mechanism which you think might be
useful to others, please submit a [[https://github.com/zzamboni/elvish-modules/pulls][pull request]]!


* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Configuration

Threshold in seconds for producing notifications (default 10).

#+BEGIN_SRC elvish
  threshold=10
#+END_SRC

#+BEGIN_SRC elvish
  # Automatically-computed variables to keep the last command, its start time and its duration
  last_cmd_start_time = 0
  last_cmd = ""
  last_cmd_duration = 0

  # Text-based notification function
  # To explicitly set it:
  #   long-running-notifications:notifier = $long-running-notifications:text_notifier
  text_notifier = { echo (edit:styled "Command lasted "$last_cmd_duration"s" magenta) }

  # GUI notifications for macOS. Requires terminal-notifier from https://github.com/julienXX/terminal-notifier
  # To explicitly set it:
  #   long-running-notifications:notifier = $long-running-notifications:macos_notifier
  macos_notifier_extraopts = [ "-sender" "com.apple.Terminal" ]
  macos_notifier = { terminal-notifier -title "Finished: "$last_cmd -message "Running time: "$last_cmd_duration"s" $@macos_notifier_extraopts > /dev/null }

  # Notification method to use. Defaults to $macos_notifier if terminal-notifier is available, $text_notifier otherwise
  notifier = $text_notifier
  if ?(which terminal-notifier >/dev/null 2>&1) {
    notifier = $macos_notifier
  }

  ######################################################################
  # Functions
  ######################################################################

  # Return the current time in Unix epoch value
  fn now {
    put (date +%s)
  }

  # Check the duration of the last command and produce a
  # notification if it exceeds the threshold
  fn before_readline_hook {
    _end_time = (now)
    last_cmd_duration = (- $_end_time $last_cmd_start_time)
    if (> $last_cmd_duration $threshold) {
      $notifier
    }
  }

  # Record the command and its start time
  fn after_readline_hook [cmd]{
    last_cmd = $cmd
    last_cmd_start_time = (now)
  }

  # Set up the prompt hooks to compute times and produce notifications
  # as needed
  fn setup {
    use ./prompt_hooks
    prompt_hooks:add-before-readline $before_readline_hook~
    prompt_hooks:add-after-readline $after_readline_hook~
    # Initialize to setup time to avoid spurious notification
    last_cmd_start_time = (now)
  }
#+END_SRC
