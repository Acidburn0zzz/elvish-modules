# DO NOT EDIT THIS FILE DIRECTLY
# This is a file generated from a literate programing source file located at
# https://github.com/zzamboni/elvish-modules/blob/master/proxy.org.
# You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

use ./prompt_hooks

host = ""

test = $false

notify = $true

disable_autoset = $false

env_vars = [ http_proxy https_proxy ]

fn eval [str]{
  tmpf = (mktemp)
  echo $str > $tmpf
  -source $tmpf
  rm -f $tmpf
}

fn is-set {
  -tmp-file = (mktemp)
  eval "if (eq $E:"(take 1 $env_vars)" '') { rm "$-tmp-file" }"
  -res = (bool ?(test -f $-tmp-file))
  rm -f $-tmp-file
  put $-res
}

fn set [@param]{
  proxyhost = $host
  if (> (count $param) 0) {
    proxyhost = $param[0]
  }
  if (not-eq $proxyhost "") {
    eval (each [var]{ put "E:"$var" = "$host } $env_vars | joins "; ")
  }
}

fn unset {
  eval (each [var]{ put "del E:"$var } $env_vars | joins "; ")
}

fn disable {
  disable_autoset = $true
  unset
}

fn enable {
  disable_autoset = $false
}

fn autoset [@_]{
  if (or (not $test) $disable_autoset) {
    return
  }
  if ($test) {
    if (and $host (not (eq $host ""))) {
      if (and $notify (not (is-set))) {
        echo (edit:styled "Setting proxy "$host blue) > /dev/tty
      }
      set
    } else {
      fail "You need to set $proxy:host to the proxy to use"
    }
  } else {
    if (and $notify (is-set)) {
      echo (edit:styled "Unsetting proxy" blue) > /dev/tty
    }
    unset
  }
}

fn init {
  prompt_hooks:add-before-readline $autoset~
  prompt_hooks:add-after-readline $autoset~
}

init
