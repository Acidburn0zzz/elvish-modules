#+TITLE:  Automatic proxy settings for Elvish
#+AUTHOR: Diego Zamboni
#+EMAIL:  diego@zzamboni.org

Manipulation of proxy-related environment variables (including
auto-setting/unsetting based on a user-defined test) for [[http://elvish.io][Elvish]].

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy
to explain. See [[file:proxy.elv][proxy.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#libraries][Libraries]]
  - [[#configuration][Configuration]]
  - [[#functions][Functions]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/proxy
#+end_src

Set your default proxy host (including port number) by assigning it to
the =$proxy:host= variable. For example:

#+begin_src elvish
  proxy:host = "proxy.corpnet.com:8079"
#+end_src

You can now manually set/unset the proxy environment variables by
calling =proxy:set= and =proxy:unset=, respectively.

For now only the =http_proxy= and =https_proxy= environment variables are
set.

If you want to enable automatic proxy switching, you need to define a
check function and assign it to the =$proxy:test= variable. It should be
a lambda which receives no arguments, and returns a true/false
value. When the function returns true, the proxy will be set. For
example, the following function will set the proxy whenever
=/etc/resolv.conf= contains any search or domain definitions ending in
"corpnet.com":

#+BEGIN_SRC elvish
  proxy:test = { and ?(test -f /etc/resolv.conf) ?(egrep -q '^(search|domain).*corpnet.com' /etc/resolv.conf) }
#+END_SRC

After defining the test, you need to call =proxy:enable_autoset= to
install the hooks that will run it automatically. The test is run
before and after every command you type.

#+begin_src elvish
  proxy:setup_autoset
#+end_src

If you want to temporarily disable the proxy auto-set function in the
current session, you can run the =proxy:disable= command. Use
=proxy:enable= to reenable it when needed. Note that =proxy:disable= also
unsets the proxy variables.

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

#+BEGIN_SRC elvish :exports none
  # DO NOT EDIT THIS FILE DIRECTLY
  # This is a file generated from a literate programing source file located at
  # https://github.com/zzamboni/elvish-modules/blob/master/proxy.org.
  # You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+END_SRC

** Libraries

We use the =prompt_hooks= library to set up the hooks for the auto-set
feature.

#+begin_src elvish
  use ./prompt_hooks
#+end_src

** Configuration

The =$proxy:host= variable contains the proxy host to used by default,
in "http://host:port" format.

#+BEGIN_SRC elvish
  host = ""
#+END_SRC

When auto-set mode is enabled using =proxy:setup_autoset=, =$proxy:test=
contains the auto-set test function. It must be a lambda which
receives no arguments, and return a true value (anything except =$false=
or an error, as per [[https://elvish.io/ref/builtin.html#bool][Elvish's booleanly interpretation of values]]) when
the proxy needs to be automatically set, false otherwise Its default
value always returns false, you should override it with code that
performs a meaningful check for your needs.

#+BEGIN_SRC elvish
  test = { put $false }
#+END_SRC

Whether to print notifications when setting/unsetting the proxy.

#+BEGIN_SRC elvish
  notify = $true
#+END_SRC

Whether autoset should be disabled (useful for temporarily stopping
the automatic proxy setting using =proxy:disable=).

#+BEGIN_SRC elvish
  disable_autoset = $false
#+END_SRC

The list of environment variables to set. By default only =http_proxy=
and =https_proxy= are set.

#+begin_src elvish
  env_vars = [ http_proxy https_proxy ]
#+end_src

** Functions

Elvish does not include an =eval= function, but we emulate one using the
=-source= command. We use this to dynamically query and set the
variables according to the contents of =$proxy:env_vars=.

#+begin_src elvish
  fn eval [str]{
    tmpf = (mktemp)
    echo $str > $tmpf
    -source $tmpf
    rm -f $tmpf
  }
#+end_src

Check whether the proxy is set. We use the first variable in
=$proxy:env_vars= for the check, with the assumption that the other
variables follow. The need to dynamically determine which variable to
check makes this function a bit tricky - basically we create a
temporary file (using the =mktemp= command), and then evaluate code that
removes the file if the proxy variable is unset - then the existence
of the file indicates the setting of the variable.

#+BEGIN_SRC elvish
  fn is-set {
    -tmp-file = (mktemp)
    eval "if (eq $E:"(take 1 $env_vars)" '') { rm "$-tmp-file" }"
    -res = (bool ?(test -f $-tmp-file))
    rm -f $-tmp-file
    put $-res
  }
#+END_SRC

Set the proxy variables to the given string. If no parameters are
given but =$proxy:host= is set, then its value is used. Note that
passing an argument to this function *does not set $param:host*, this
needs to be done explicitly if you want it.

#+BEGIN_SRC elvish
  fn set [@param]{
    proxyhost = $host
    if (> (count $param) 0) {
      proxyhost = $param[0]
    }
    if (not-eq $proxyhost "") {
      eval (each [var]{ put "E:"$var" = "$host } $env_vars | joins "; ")
    }
  }
#+END_SRC

Unset the proxy variables.

#+BEGIN_SRC elvish
  fn unset {
    eval (each [var]{ put "del E:"$var } $env_vars | joins "; ")
  }
#+END_SRC

Disable auto-set and unset the proxy.

#+BEGIN_SRC elvish
  fn disable {
    disable_autoset = $true
    unset
  }
#+END_SRC

Enable auto-set after it had been disabled using =proxy:disable_autoset=.

#+BEGIN_SRC elvish
  fn enable {
    disable_autoset = $false
  }
#+END_SRC

This is the function that powers the auto-set feature. It runs
=$proxy:test= and sets/unsets the variables depending on the result.

#+BEGIN_SRC elvish
  fn autoset [@_]{
    if $disable_autoset {
      return
    }
    if ($test) {
      if (and $host (not (eq $host ""))) {
        if (and $notify (not (is-set))) {
          echo (edit:styled "Setting proxy "$host blue) > /dev/tty
        }
        set
      } else {
        fail "You need to set $proxy:host to the proxy to use"
      }
    } else {
      if (and $notify (is-set)) {
        echo (edit:styled "Unsetting proxy" blue) > /dev/tty
      }
      unset
    }
  }
#+END_SRC

The =proxy:setup_autoset= function sets up the auto-set feature by
adding the =proxy:autoset= function to both the before- and
after-command hooks.

#+BEGIN_SRC elvish
  fn setup_autoset {
    prompt_hooks:add-before-readline $autoset~
    prompt_hooks:add-after-readline $autoset~
  }
#+END_SRC
