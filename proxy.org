#+TITLE:  Automatic proxy settings for Elvish
#+AUTHOR: Diego Zamboni
#+EMAIL:  diego@zzamboni.org

Manipulation of proxy-related environment variables (including
auto-setting/unsetting based on a user-defined test) for [[http://elvish.io][Elvish]].

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy
to explain. See [[file:proxy.elv][proxy.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/proxy
#+end_src

Set your default proxy host (including port number) by assigning it to
the =$proxy:host= variable. For example:

#+begin_src elvish
  proxy:host = "proxy.corpnet.com:8079"
#+end_src

You can now manually set/unset the proxy environment variables by
calling =proxy:set= and =proxy:unset=, respectively.

For now only the =http_proxy= and =https_proxy= environment variables are
set.

If you want to enable automatic proxy switching, you need to define a
check function and assign it to the =$proxy:test= variable. It should be
a lambda which receives no arguments, and returns a true/false
value. When the function returns true, the proxy will be set. For
example, the following function will set the proxy whenever
=/etc/resolv.conf= contains any search or domain definitions ending in
"corpnet.com":

#+BEGIN_SRC elvish
  proxy:test = { and ?(test -f /etc/resolv.conf) ?(egrep -q '^(search|domain).*corpnet.com' /etc/resolv.conf) }
#+END_SRC

After defining the test, you need to call =proxy:enable_autoset= to
install the hooks that will run it automatically. The test is run
before and after every command you type.

#+begin_src elvish
  proxy:setup_autoset
#+end_src

If you want to temporarily disable the proxy auto-set function in the
current session, you can run the =proxy:disable= command. Use
=proxy:enable= to reenable it when needed. Note that =proxy:disable= also
unsets the proxy variables.

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

#+BEGIN_SRC elvish :exports none
  # DO NOT EDIT THIS FILE DIRECTLY
  # This is a file generated from a literate programing source file located at
  # https://github.com/zzamboni/elvish-modules/blob/master/proxy.org.
  # You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+END_SRC

#+BEGIN_SRC elvish
  # Proxy host to used by default. Usual format: host:port
  host = ""

  # This function should return a true value when the proxy needs to be set, false otherwise
  # By default it returns false, you should override it with code that performs a meaningful
  # check for your needs.
  test = { put $false }

  # Whether to print notifications when setting/unsetting the proxy
  notify = $true

  # Whether autoset should be disabled (useful for temporarily stopping the automatic proxy setting)
  disable_autoset = $false

  # Check whether the proxy is set. We use $E:http_proxy for the check
  fn is-set {
    not-eq $E:http_proxy ""
  }

  # Set the proxy variables to the given string. If no parameters are given but `$proxy:host` is set,
  # then its value is used
  fn set [@param]{
    proxyhost = $host
    if (> (count $param) 0) {
      proxyhost = $param[0]
    }
    if (not-eq $proxyhost "") {
      E:http_proxy = $host
      E:https_proxy = $host
    }
  }

  # Unset the proxy variables
  fn unset {
    del E:http_proxy
    del E:https_proxy
  }

  # Disable auto-set and unset the proxy
  fn disable {
    disable_autoset = $true
    unset
  }

  # Enable auto-set
  fn enable {
    disable_autoset = $false
  }

  # Automatically set the proxy by running `proxy:test` and setting/unsetting depending
  # on the result
  fn autoset {
    if (not $disable_autoset) {
      if ($test) {
        if (and $host (not (eq $host ""))) {
          if (and $notify (not (is-set))) { echo (edit:styled "Setting proxy "$host blue) }
          set $host
        } else {
          fail "You need to set $proxy:host to the proxy to use"
        }
      } else {
        if (and $notify (is-set)) { echo (edit:styled "Unsetting proxy" blue) }
        unset
      }
    }
  }

  fn setup_autoset {
    edit:before-readline=[ $@edit:before-readline { autoset } ]
    edit:after-readline=[ $@edit:after-readline [cmd]{ autoset } ]
  }
#+END_SRC
