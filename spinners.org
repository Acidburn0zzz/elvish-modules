#+title: Terminal spinners for Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+name: module-summary
Functions to print different styles of progress spinners for use in Elvish scripts.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy to explain. See [[file:spinners.elv][spinners.elv]] for the generated file.

* Table of Contents                                          :TOC_3:noexport:
- [[#usage][Usage]]
  - [[#available-spinners][Available spinners]]
  - [[#showing-spinner-while-a-function-runs][Showing spinner while a function runs]]
- [[#implementation][Implementation]]
  - [[#modules][Modules]]
  - [[#initialization][Initialization]]
  - [[#utility-functions][Utility functions]]
  - [[#building-and-manually-advancing-spinners][Building and manually advancing spinners]]
  - [[#running-a-function-with-a-spinner][Running a function with a spinner]]
  - [[#demo-mode][Demo mode]]
  - [[#spinner-definitions][Spinner definitions]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]] (you can put these statements in your =rc.elv= file as well, to automatically install the package upon startup if needed):

#+begin_src elvish
  use epm
  epm:install &silent-if-installed github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/spinners
#+end_src

** Available spinners

The spinner definitions are taken from the [[https://github.com/sindresorhus/cli-spinners/][sindresorhus/cli-spinners]] project. You can view a demo of all the spinners with =spinners:demo=:

[[file:images/spinners-demo.gif]]

You can get the list of available spinners using the =spinners:list= function.

#+begin_src elvish :use github.com/zzamboni/elvish-modules/spinners :exports both
spinners:list | take 5
#+end_src

#+RESULTS:
: ▶ arc
: ▶ arrow
: ▶ arrow2
: ▶ arrow3
: ▶ balloon

** Showing spinner while a function runs

The easiest way to create a spinner is to use =spinners:run= to execute a lambda while displaying a spinner. The spinner will stop automatically when the lambda finishes:

#+begin_src elvish
  spinners:run { sleep 10 }
#+end_src

By default, the spinner specified by =$spinners:default-spinner= will be used. You can change this by passing the =&spinner= option. You can also specify a title to show next to the spinner by passing the =&title= option:

#+begin_src elvish
  spinners:run &spinner=arrow &title="Loading modules" { sleep 10 }
#+end_src

The input and output of =spinners:run= are connected to the lambda, so you can use it as part of a pipeline. E.g.:

#+begin_src elvish
  spinners:run &title=(styled "Counting files" blue) &style=green { fd . ~ } | count
  fd . ~ | spinners:run &title="Counting characters in filenames" { each [f]{ all $f } } | count
#+end_src

The following options are available:

- =&spinner= - specify the spinner to use, by name. If not given, =$spinners:default-spinner= is used.
- =&title= - an optional string or [[https://elv.sh/ref/builtin.html#styled][styled object]] that will be shown after the spinner.
- =&style= - an optional list of [[https://elv.sh/ref/builtin.html#styled][style transformers]] that will be applied to the spinner.
- =&prefix= - an optional string or  [[https://elv.sh/ref/builtin.html#styled][styled object]] that will be shown before the spinner.
- =&indent= - an optional integer indicating an indentation level. The indent will appear before =prefix= if both are given.
- =&cursor= - an optional boolean specifying whether the cursor should be shown while the spinner is running. Default is to hide it.
- =&persist= - an optional boolean specifying whether the spinner should be left in place and the cursor moved to the next line when the spinner finishes running. By default the spinner is cleared when it finishes running, and the cursor stays at the beginning of the line.

A spinner definition consists of frames and an interval. These can be specified to create a custom spinner:
- =&frames= - a string or list containing the different steps for the spinner.
- =&interval= - interval between the frames, in milliseconds.

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Modules

#+begin_src elvish
  use str
#+end_src

** Initialization

When the module is loaded, we read the spinner definitions from =spinners.json=.

#+begin_src elvish
  spinners = (from-json < (path-dir (src)[path])/spinners.json)
#+end_src

By default the =dots= spinner is used.

#+begin_src elvish
  default-spinner = 'dots'
#+end_src

** Utility functions

All output is produced through this function.

#+begin_src elvish
  fn output [@s]{
    print $@s >/dev/tty
  }
#+end_src

Wait an amount of time as defined by the spinner.

#+begin_src elvish
  fn spinner-sleep [s]{
    sleep (to-string (/ $s[interval] 1000))
  }
#+end_src

ANSI escape sequences used to hide/show the cursor and to clear the line.

#+begin_src elvish
  fn hide-cursor {
    put "\e[?25l"
  }
  fn show-cursor {
    put "\e[?25h"
  }
  fn clear-line {
    put "\e[0K"
  }
#+end_src

Return the list of available spinners

#+begin_src elvish
  fn list {
    keys $spinners | order
  }
#+end_src
** Building and manually advancing spinners

A /spinner object/ is a definition of a spinner, and is a map containing the following keys:

- =frames= - a string or list containing the different steps for the spinner.
- =interval= - interval between the frames, in milliseconds.
- =title= - an optional string or [[https://elv.sh/ref/builtin.html#styled][styled object]] that will be shown after the spinner.
- =style= - an optional list of [[https://elv.sh/ref/builtin.html#styled][style transformers]] that will be applied to the spinner characters.
- =prefix= - an optional string or  [[https://elv.sh/ref/builtin.html#styled][styled object]] that will be shown before the spinner.
- =indent= - an optional integer indicating an indentation level. The indent will appear before =prefix= if both are given.
- =cursor= - an optional boolean specifying whether the cursor should be shown while the spinner is running. Default is to hide it.
- =persist= - an optional boolean specifying whether the spinner should be left in place and the cursor moved to the next line when the spinner finishes running. By default the spinner is cleared when it finishes running, and the cursor stays at the beginning of the line.
- =current= - the current step of the spinner as it runs.
- =id= - unique identifier for the spinner. By default generated as a random number, but can be specified using the =&id= option if desired.

=spinners:new= creates a new spinner object containing the keys above. The =&spinner= option can be used to initialize =&frames= and =&interval= from the default spinner definitions. If not given, =$spinners:default-spinner= is used. If =&frames= and =&interval= are given, they are used to override the default values. =&title=, =&prefix= and =&style= default to empty.

#+begin_src elvish
  fn new [&spinner=$nil &frames=$nil &interval=$nil &title="" &style=[] &prefix="" &indent=0 &cursor=$false &persist=$false &id=$nil]{
    # Use default spinner if none is specified
    if (not $spinner) { spinner = $default-spinner }
    # Automatically convert non-list styles, so you can do e.g. &style=red
    if (not-eq (kind-of $style) list) { style = [$style] }
    put [
      &id=       (or $id (e=?(uuidgen)) (randint 0 9999999))
      &frames=   (or $frames $spinners[$spinner][frames])
      &interval= (or $interval $spinners[$spinner][interval])
      &title=    $title
      &prefix=   $prefix
      &indent=   $indent
      &style=    $style
      &cursor=   $cursor
      &persist=  $persist
      &current=  0
    ]
  }
#+end_src

Once a spinner object is created, =spinners:step= can be used to display and advance the spinner. This function returns an updated spinner object, which needs to be stored by the caller (Elvish does not support modifying arguments by reference).

#+begin_src elvish
  fn step [spinner]{
    steps = $spinner[frames]
    indentation = (str:join '' [(repeat $spinner[indent] ' ')])
    pre-string = (if (not-eq $spinner[prefix] '') { put $spinner[prefix]' ' } else { put '' })
    post-string = (if (not-eq $spinner[title] '') { put ' '$spinner[title] } else { put '' })
    output $indentation$pre-string(styled $steps[$spinner[current]] (all $spinner[style]))$post-string(clear-line)"\r"
    inc = 1
    if (eq (kind-of $steps string)) {
      inc = (count $steps[$spinner[current]])
    }
    spinner[current] = (% (+ $spinner[current] $inc) (count $steps))
    put $spinner
  }
#+end_src

** Running a function with a spinner

Simplest point of entry for displaying a spinner while a function is running. Takes a lambda as the only mandatory argument. A spinner will be automatically created and displayed until the lambda finishes. It takes the same options as =spinners:new=, which can be used to specify the details of the spinner to use.

#+begin_src elvish
  fn run [&spinner=$nil &frames=$nil &interval=$nil &title="" &prefix="" &style=[] &cursor=$false &persist=$false f]{
    s = (new &spinner=$spinner &frames=$frames &interval=$interval &title=$title &prefix=$prefix &style=$style &cursor=$cursor &persist=$persist)
    stop = $false
    run-parallel {
      if (not $s[cursor]) { output (hide-cursor) }
      while (not $stop) {
        s = (step $s)
        spinner-sleep $s
      }
      if (not $s[cursor]) { output (show-cursor) }
      if $persist {
        output "\n"
      } else {
        output (clear-line)
      }
    } {
      try {
        $f
      } finally {
        stop = $true
      }
    }
  }
#+end_src

** Demo mode

Produce all the spinners in sequence.

#+begin_src elvish
  fn demo [&time=2 &style=blue]{
    list | each [s]{
      run &spinner=$s &title=$s &style=$style { sleep $time }
    }
  }
#+end_src
** Spinner definitions

The spinner definitions are taken from the [[https://github.com/sindresorhus/cli-spinners/][sindresorhus/cli-spinners]] project, released under the following license:

#+begin_example
MIT License

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#+end_example

#+begin_src javascript :tangle spinners.json
  {
    "dots": {
      "interval": 80,
      "frames": [
        "⠋",
        "⠙",
        "⠹",
        "⠸",
        "⠼",
        "⠴",
        "⠦",
        "⠧",
        "⠇",
        "⠏"
      ]
    },
    "dots2": {
      "interval": 80,
      "frames": [
        "⣾",
        "⣽",
        "⣻",
        "⢿",
        "⡿",
        "⣟",
        "⣯",
        "⣷"
      ]
    },
    "dots3": {
      "interval": 80,
      "frames": [
        "⠋",
        "⠙",
        "⠚",
        "⠞",
        "⠖",
        "⠦",
        "⠴",
        "⠲",
        "⠳",
        "⠓"
      ]
    },
    "dots4": {
      "interval": 80,
      "frames": [
        "⠄",
        "⠆",
        "⠇",
        "⠋",
        "⠙",
        "⠸",
        "⠰",
        "⠠",
        "⠰",
        "⠸",
        "⠙",
        "⠋",
        "⠇",
        "⠆"
      ]
    },
    "dots5": {
      "interval": 80,
      "frames": [
        "⠋",
        "⠙",
        "⠚",
        "⠒",
        "⠂",
        "⠂",
        "⠒",
        "⠲",
        "⠴",
        "⠦",
        "⠖",
        "⠒",
        "⠐",
        "⠐",
        "⠒",
        "⠓",
        "⠋"
      ]
    },
    "dots6": {
      "interval": 80,
      "frames": [
        "⠁",
        "⠉",
        "⠙",
        "⠚",
        "⠒",
        "⠂",
        "⠂",
        "⠒",
        "⠲",
        "⠴",
        "⠤",
        "⠄",
        "⠄",
        "⠤",
        "⠴",
        "⠲",
        "⠒",
        "⠂",
        "⠂",
        "⠒",
        "⠚",
        "⠙",
        "⠉",
        "⠁"
      ]
    },
    "dots7": {
      "interval": 80,
      "frames": [
        "⠈",
        "⠉",
        "⠋",
        "⠓",
        "⠒",
        "⠐",
        "⠐",
        "⠒",
        "⠖",
        "⠦",
        "⠤",
        "⠠",
        "⠠",
        "⠤",
        "⠦",
        "⠖",
        "⠒",
        "⠐",
        "⠐",
        "⠒",
        "⠓",
        "⠋",
        "⠉",
        "⠈"
      ]
    },
    "dots8": {
      "interval": 80,
      "frames": [
        "⠁",
        "⠁",
        "⠉",
        "⠙",
        "⠚",
        "⠒",
        "⠂",
        "⠂",
        "⠒",
        "⠲",
        "⠴",
        "⠤",
        "⠄",
        "⠄",
        "⠤",
        "⠠",
        "⠠",
        "⠤",
        "⠦",
        "⠖",
        "⠒",
        "⠐",
        "⠐",
        "⠒",
        "⠓",
        "⠋",
        "⠉",
        "⠈",
        "⠈"
      ]
    },
    "dots9": {
      "interval": 80,
      "frames": [
        "⢹",
        "⢺",
        "⢼",
        "⣸",
        "⣇",
        "⡧",
        "⡗",
        "⡏"
      ]
    },
    "dots10": {
      "interval": 80,
      "frames": [
        "⢄",
        "⢂",
        "⢁",
        "⡁",
        "⡈",
        "⡐",
        "⡠"
      ]
    },
    "dots11": {
      "interval": 100,
      "frames": [
        "⠁",
        "⠂",
        "⠄",
        "⡀",
        "⢀",
        "⠠",
        "⠐",
        "⠈"
      ]
    },
    "dots12": {
      "interval": 80,
      "frames": [
        "⢀⠀",
        "⡀⠀",
        "⠄⠀",
        "⢂⠀",
        "⡂⠀",
        "⠅⠀",
        "⢃⠀",
        "⡃⠀",
        "⠍⠀",
        "⢋⠀",
        "⡋⠀",
        "⠍⠁",
        "⢋⠁",
        "⡋⠁",
        "⠍⠉",
        "⠋⠉",
        "⠋⠉",
        "⠉⠙",
        "⠉⠙",
        "⠉⠩",
        "⠈⢙",
        "⠈⡙",
        "⢈⠩",
        "⡀⢙",
        "⠄⡙",
        "⢂⠩",
        "⡂⢘",
        "⠅⡘",
        "⢃⠨",
        "⡃⢐",
        "⠍⡐",
        "⢋⠠",
        "⡋⢀",
        "⠍⡁",
        "⢋⠁",
        "⡋⠁",
        "⠍⠉",
        "⠋⠉",
        "⠋⠉",
        "⠉⠙",
        "⠉⠙",
        "⠉⠩",
        "⠈⢙",
        "⠈⡙",
        "⠈⠩",
        "⠀⢙",
        "⠀⡙",
        "⠀⠩",
        "⠀⢘",
        "⠀⡘",
        "⠀⠨",
        "⠀⢐",
        "⠀⡐",
        "⠀⠠",
        "⠀⢀",
        "⠀⡀"
      ]
    },
    "dots8Bit": {
      "interval": 80,
      "frames": [
        "⠀",
        "⠁",
        "⠂",
        "⠃",
        "⠄",
        "⠅",
        "⠆",
        "⠇",
        "⡀",
        "⡁",
        "⡂",
        "⡃",
        "⡄",
        "⡅",
        "⡆",
        "⡇",
        "⠈",
        "⠉",
        "⠊",
        "⠋",
        "⠌",
        "⠍",
        "⠎",
        "⠏",
        "⡈",
        "⡉",
        "⡊",
        "⡋",
        "⡌",
        "⡍",
        "⡎",
        "⡏",
        "⠐",
        "⠑",
        "⠒",
        "⠓",
        "⠔",
        "⠕",
        "⠖",
        "⠗",
        "⡐",
        "⡑",
        "⡒",
        "⡓",
        "⡔",
        "⡕",
        "⡖",
        "⡗",
        "⠘",
        "⠙",
        "⠚",
        "⠛",
        "⠜",
        "⠝",
        "⠞",
        "⠟",
        "⡘",
        "⡙",
        "⡚",
        "⡛",
        "⡜",
        "⡝",
        "⡞",
        "⡟",
        "⠠",
        "⠡",
        "⠢",
        "⠣",
        "⠤",
        "⠥",
        "⠦",
        "⠧",
        "⡠",
        "⡡",
        "⡢",
        "⡣",
        "⡤",
        "⡥",
        "⡦",
        "⡧",
        "⠨",
        "⠩",
        "⠪",
        "⠫",
        "⠬",
        "⠭",
        "⠮",
        "⠯",
        "⡨",
        "⡩",
        "⡪",
        "⡫",
        "⡬",
        "⡭",
        "⡮",
        "⡯",
        "⠰",
        "⠱",
        "⠲",
        "⠳",
        "⠴",
        "⠵",
        "⠶",
        "⠷",
        "⡰",
        "⡱",
        "⡲",
        "⡳",
        "⡴",
        "⡵",
        "⡶",
        "⡷",
        "⠸",
        "⠹",
        "⠺",
        "⠻",
        "⠼",
        "⠽",
        "⠾",
        "⠿",
        "⡸",
        "⡹",
        "⡺",
        "⡻",
        "⡼",
        "⡽",
        "⡾",
        "⡿",
        "⢀",
        "⢁",
        "⢂",
        "⢃",
        "⢄",
        "⢅",
        "⢆",
        "⢇",
        "⣀",
        "⣁",
        "⣂",
        "⣃",
        "⣄",
        "⣅",
        "⣆",
        "⣇",
        "⢈",
        "⢉",
        "⢊",
        "⢋",
        "⢌",
        "⢍",
        "⢎",
        "⢏",
        "⣈",
        "⣉",
        "⣊",
        "⣋",
        "⣌",
        "⣍",
        "⣎",
        "⣏",
        "⢐",
        "⢑",
        "⢒",
        "⢓",
        "⢔",
        "⢕",
        "⢖",
        "⢗",
        "⣐",
        "⣑",
        "⣒",
        "⣓",
        "⣔",
        "⣕",
        "⣖",
        "⣗",
        "⢘",
        "⢙",
        "⢚",
        "⢛",
        "⢜",
        "⢝",
        "⢞",
        "⢟",
        "⣘",
        "⣙",
        "⣚",
        "⣛",
        "⣜",
        "⣝",
        "⣞",
        "⣟",
        "⢠",
        "⢡",
        "⢢",
        "⢣",
        "⢤",
        "⢥",
        "⢦",
        "⢧",
        "⣠",
        "⣡",
        "⣢",
        "⣣",
        "⣤",
        "⣥",
        "⣦",
        "⣧",
        "⢨",
        "⢩",
        "⢪",
        "⢫",
        "⢬",
        "⢭",
        "⢮",
        "⢯",
        "⣨",
        "⣩",
        "⣪",
        "⣫",
        "⣬",
        "⣭",
        "⣮",
        "⣯",
        "⢰",
        "⢱",
        "⢲",
        "⢳",
        "⢴",
        "⢵",
        "⢶",
        "⢷",
        "⣰",
        "⣱",
        "⣲",
        "⣳",
        "⣴",
        "⣵",
        "⣶",
        "⣷",
        "⢸",
        "⢹",
        "⢺",
        "⢻",
        "⢼",
        "⢽",
        "⢾",
        "⢿",
        "⣸",
        "⣹",
        "⣺",
        "⣻",
        "⣼",
        "⣽",
        "⣾",
        "⣿"
      ]
    },
    "line": {
      "interval": 130,
      "frames": [
        "-",
        "\\",
        "|",
        "/"
      ]
    },
    "line2": {
      "interval": 100,
      "frames": [
        "⠂",
        "-",
        "–",
        "—",
        "–",
        "-"
      ]
    },
    "pipe": {
      "interval": 100,
      "frames": [
        "┤",
        "┘",
        "┴",
        "└",
        "├",
        "┌",
        "┬",
        "┐"
      ]
    },
    "simpleDots": {
      "interval": 400,
      "frames": [
        ".  ",
        ".. ",
        "...",
        "   "
      ]
    },
    "simpleDotsScrolling": {
      "interval": 200,
      "frames": [
        ".  ",
        ".. ",
        "...",
        " ..",
        "  .",
        "   "
      ]
    },
    "star": {
      "interval": 70,
      "frames": [
        "✶",
        "✸",
        "✹",
        "✺",
        "✹",
        "✷"
      ]
    },
    "star2": {
      "interval": 80,
      "frames": [
        "+",
        "x",
        "*"
      ]
    },
    "flip": {
      "interval": 70,
      "frames": [
        "_",
        "_",
        "_",
        "-",
        "`",
        "`",
        "'",
        "´",
        "-",
        "_",
        "_",
        "_"
      ]
    },
    "hamburger": {
      "interval": 100,
      "frames": [
        "☱",
        "☲",
        "☴"
      ]
    },
    "growVertical": {
      "interval": 120,
      "frames": [
        "▁",
        "▃",
        "▄",
        "▅",
        "▆",
        "▇",
        "▆",
        "▅",
        "▄",
        "▃"
      ]
    },
    "growHorizontal": {
      "interval": 120,
      "frames": [
        "▏",
        "▎",
        "▍",
        "▌",
        "▋",
        "▊",
        "▉",
        "▊",
        "▋",
        "▌",
        "▍",
        "▎"
      ]
    },
    "balloon": {
      "interval": 140,
      "frames": [
        " ",
        ".",
        "o",
        "O",
        "@",
        "*",
        " "
      ]
    },
    "balloon2": {
      "interval": 120,
      "frames": [
        ".",
        "o",
        "O",
        "°",
        "O",
        "o",
        "."
      ]
    },
    "noise": {
      "interval": 100,
      "frames": [
        "▓",
        "▒",
        "░"
      ]
    },
    "bounce": {
      "interval": 120,
      "frames": [
        "⠁",
        "⠂",
        "⠄",
        "⠂"
      ]
    },
    "boxBounce": {
      "interval": 120,
      "frames": [
        "▖",
        "▘",
        "▝",
        "▗"
      ]
    },
    "boxBounce2": {
      "interval": 100,
      "frames": [
        "▌",
        "▀",
        "▐",
        "▄"
      ]
    },
    "triangle": {
      "interval": 50,
      "frames": [
        "◢",
        "◣",
        "◤",
        "◥"
      ]
    },
    "arc": {
      "interval": 100,
      "frames": [
        "◜",
        "◠",
        "◝",
        "◞",
        "◡",
        "◟"
      ]
    },
    "circle": {
      "interval": 120,
      "frames": [
        "◡",
        "⊙",
        "◠"
      ]
    },
    "squareCorners": {
      "interval": 180,
      "frames": [
        "◰",
        "◳",
        "◲",
        "◱"
      ]
    },
    "circleQuarters": {
      "interval": 120,
      "frames": [
        "◴",
        "◷",
        "◶",
        "◵"
      ]
    },
    "circleHalves": {
      "interval": 50,
      "frames": [
        "◐",
        "◓",
        "◑",
        "◒"
      ]
    },
    "squish": {
      "interval": 100,
      "frames": [
        "╫",
        "╪"
      ]
    },
    "toggle": {
      "interval": 250,
      "frames": [
        "⊶",
        "⊷"
      ]
    },
    "toggle2": {
      "interval": 80,
      "frames": [
        "▫",
        "▪"
      ]
    },
    "toggle3": {
      "interval": 120,
      "frames": [
        "□",
        "■"
      ]
    },
    "toggle4": {
      "interval": 100,
      "frames": [
        "■",
        "□",
        "▪",
        "▫"
      ]
    },
    "toggle5": {
      "interval": 100,
      "frames": [
        "▮",
        "▯"
      ]
    },
    "toggle6": {
      "interval": 300,
      "frames": [
        "ဝ",
        "၀"
      ]
    },
    "toggle7": {
      "interval": 80,
      "frames": [
        "⦾",
        "⦿"
      ]
    },
    "toggle8": {
      "interval": 100,
      "frames": [
        "◍",
        "◌"
      ]
    },
    "toggle9": {
      "interval": 100,
      "frames": [
        "◉",
        "◎"
      ]
    },
    "toggle10": {
      "interval": 100,
      "frames": [
        "㊂",
        "㊀",
        "㊁"
      ]
    },
    "toggle11": {
      "interval": 50,
      "frames": [
        "⧇",
        "⧆"
      ]
    },
    "toggle12": {
      "interval": 120,
      "frames": [
        "☗",
        "☖"
      ]
    },
    "toggle13": {
      "interval": 80,
      "frames": [
        "=",
        "*",
        "-"
      ]
    },
    "arrow": {
      "interval": 100,
      "frames": [
        "←",
        "↖",
        "↑",
        "↗",
        "→",
        "↘",
        "↓",
        "↙"
      ]
    },
    "arrow2": {
      "interval": 80,
      "frames": [
        "⬆️ ",
        "↗️ ",
        "➡️ ",
        "↘️ ",
        "⬇️ ",
        "↙️ ",
        "⬅️ ",
        "↖️ "
      ]
    },
    "arrow3": {
      "interval": 120,
      "frames": [
        "▹▹▹▹▹",
        "▸▹▹▹▹",
        "▹▸▹▹▹",
        "▹▹▸▹▹",
        "▹▹▹▸▹",
        "▹▹▹▹▸"
      ]
    },
    "bouncingBar": {
      "interval": 80,
      "frames": [
        "[    ]",
        "[=   ]",
        "[==  ]",
        "[=== ]",
        "[ ===]",
        "[  ==]",
        "[   =]",
        "[    ]",
        "[   =]",
        "[  ==]",
        "[ ===]",
        "[====]",
        "[=== ]",
        "[==  ]",
        "[=   ]"
      ]
    },
    "bouncingBall": {
      "interval": 80,
      "frames": [
        "( ●    )",
        "(  ●   )",
        "(   ●  )",
        "(    ● )",
        "(     ●)",
        "(    ● )",
        "(   ●  )",
        "(  ●   )",
        "( ●    )",
        "(●     )"
      ]
    },
    "smiley": {
      "interval": 200,
      "frames": [
        "😄 ",
        "😝 "
      ]
    },
    "monkey": {
      "interval": 300,
      "frames": [
        "🙈 ",
        "🙈 ",
        "🙉 ",
        "🙊 "
      ]
    },
    "hearts": {
      "interval": 100,
      "frames": [
        "💛 ",
        "💙 ",
        "💜 ",
        "💚 ",
        "❤️ "
      ]
    },
    "clock": {
      "interval": 100,
      "frames": [
        "🕛 ",
        "🕐 ",
        "🕑 ",
        "🕒 ",
        "🕓 ",
        "🕔 ",
        "🕕 ",
        "🕖 ",
        "🕗 ",
        "🕘 ",
        "🕙 ",
        "🕚 "
      ]
    },
    "earth": {
      "interval": 180,
      "frames": [
        "🌍 ",
        "🌎 ",
        "🌏 "
      ]
    },
    "material": {
      "interval": 17,
      "frames": [
        "█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "███▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "███████▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "████████▁▁▁▁▁▁▁▁▁▁▁▁",
        "█████████▁▁▁▁▁▁▁▁▁▁▁",
        "█████████▁▁▁▁▁▁▁▁▁▁▁",
        "██████████▁▁▁▁▁▁▁▁▁▁",
        "███████████▁▁▁▁▁▁▁▁▁",
        "█████████████▁▁▁▁▁▁▁",
        "██████████████▁▁▁▁▁▁",
        "██████████████▁▁▁▁▁▁",
        "▁██████████████▁▁▁▁▁",
        "▁██████████████▁▁▁▁▁",
        "▁██████████████▁▁▁▁▁",
        "▁▁██████████████▁▁▁▁",
        "▁▁▁██████████████▁▁▁",
        "▁▁▁▁█████████████▁▁▁",
        "▁▁▁▁██████████████▁▁",
        "▁▁▁▁██████████████▁▁",
        "▁▁▁▁▁██████████████▁",
        "▁▁▁▁▁██████████████▁",
        "▁▁▁▁▁██████████████▁",
        "▁▁▁▁▁▁██████████████",
        "▁▁▁▁▁▁██████████████",
        "▁▁▁▁▁▁▁█████████████",
        "▁▁▁▁▁▁▁█████████████",
        "▁▁▁▁▁▁▁▁████████████",
        "▁▁▁▁▁▁▁▁████████████",
        "▁▁▁▁▁▁▁▁▁███████████",
        "▁▁▁▁▁▁▁▁▁███████████",
        "▁▁▁▁▁▁▁▁▁▁██████████",
        "▁▁▁▁▁▁▁▁▁▁██████████",
        "▁▁▁▁▁▁▁▁▁▁▁▁████████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
        "█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
        "██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
        "██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
        "███▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
        "████▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
        "█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
        "█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
        "██████▁▁▁▁▁▁▁▁▁▁▁▁▁█",
        "████████▁▁▁▁▁▁▁▁▁▁▁▁",
        "█████████▁▁▁▁▁▁▁▁▁▁▁",
        "█████████▁▁▁▁▁▁▁▁▁▁▁",
        "█████████▁▁▁▁▁▁▁▁▁▁▁",
        "█████████▁▁▁▁▁▁▁▁▁▁▁",
        "███████████▁▁▁▁▁▁▁▁▁",
        "████████████▁▁▁▁▁▁▁▁",
        "████████████▁▁▁▁▁▁▁▁",
        "██████████████▁▁▁▁▁▁",
        "██████████████▁▁▁▁▁▁",
        "▁██████████████▁▁▁▁▁",
        "▁██████████████▁▁▁▁▁",
        "▁▁▁█████████████▁▁▁▁",
        "▁▁▁▁▁████████████▁▁▁",
        "▁▁▁▁▁████████████▁▁▁",
        "▁▁▁▁▁▁███████████▁▁▁",
        "▁▁▁▁▁▁▁▁█████████▁▁▁",
        "▁▁▁▁▁▁▁▁█████████▁▁▁",
        "▁▁▁▁▁▁▁▁▁█████████▁▁",
        "▁▁▁▁▁▁▁▁▁█████████▁▁",
        "▁▁▁▁▁▁▁▁▁▁█████████▁",
        "▁▁▁▁▁▁▁▁▁▁▁████████▁",
        "▁▁▁▁▁▁▁▁▁▁▁████████▁",
        "▁▁▁▁▁▁▁▁▁▁▁▁███████▁",
        "▁▁▁▁▁▁▁▁▁▁▁▁███████▁",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
        "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁"
      ]
    },
    "moon": {
      "interval": 80,
      "frames": [
        "🌑 ",
        "🌒 ",
        "🌓 ",
        "🌔 ",
        "🌕 ",
        "🌖 ",
        "🌗 ",
        "🌘 "
      ]
    },
    "runner": {
      "interval": 140,
      "frames": [
        "🚶 ",
        "🏃 "
      ]
    },
    "pong": {
      "interval": 80,
      "frames": [
        "▐⠂       ▌",
        "▐⠈       ▌",
        "▐ ⠂      ▌",
        "▐ ⠠      ▌",
        "▐  ⡀     ▌",
        "▐  ⠠     ▌",
        "▐   ⠂    ▌",
        "▐   ⠈    ▌",
        "▐    ⠂   ▌",
        "▐    ⠠   ▌",
        "▐     ⡀  ▌",
        "▐     ⠠  ▌",
        "▐      ⠂ ▌",
        "▐      ⠈ ▌",
        "▐       ⠂▌",
        "▐       ⠠▌",
        "▐       ⡀▌",
        "▐      ⠠ ▌",
        "▐      ⠂ ▌",
        "▐     ⠈  ▌",
        "▐     ⠂  ▌",
        "▐    ⠠   ▌",
        "▐    ⡀   ▌",
        "▐   ⠠    ▌",
        "▐   ⠂    ▌",
        "▐  ⠈     ▌",
        "▐  ⠂     ▌",
        "▐ ⠠      ▌",
        "▐ ⡀      ▌",
        "▐⠠       ▌"
      ]
    },
    "shark": {
      "interval": 120,
      "frames": [
        "▐|\\____________▌",
        "▐_|\\___________▌",
        "▐__|\\__________▌",
        "▐___|\\_________▌",
        "▐____|\\________▌",
        "▐_____|\\_______▌",
        "▐______|\\______▌",
        "▐_______|\\_____▌",
        "▐________|\\____▌",
        "▐_________|\\___▌",
        "▐__________|\\__▌",
        "▐___________|\\_▌",
        "▐____________|\\▌",
        "▐____________/|▌",
        "▐___________/|_▌",
        "▐__________/|__▌",
        "▐_________/|___▌",
        "▐________/|____▌",
        "▐_______/|_____▌",
        "▐______/|______▌",
        "▐_____/|_______▌",
        "▐____/|________▌",
        "▐___/|_________▌",
        "▐__/|__________▌",
        "▐_/|___________▌",
        "▐/|____________▌"
      ]
    },
    "dqpb": {
      "interval": 100,
      "frames": [
        "d",
        "q",
        "p",
        "b"
      ]
    },
    "weather": {
      "interval": 100,
      "frames": [
        "☀️ ",
        "☀️ ",
        "☀️ ",
        "🌤 ",
        "⛅️ ",
        "🌥 ",
        "☁️ ",
        "🌧 ",
        "🌨 ",
        "🌧 ",
        "🌨 ",
        "🌧 ",
        "🌨 ",
        "⛈ ",
        "🌨 ",
        "🌧 ",
        "🌨 ",
        "☁️ ",
        "🌥 ",
        "⛅️ ",
        "🌤 ",
        "☀️ ",
        "☀️ "
      ]
    },
    "christmas": {
      "interval": 400,
      "frames": [
        "🌲",
        "🎄"
      ]
    },
    "grenade": {
      "interval": 80,
      "frames": [
        "،   ",
        "′   ",
        " ´ ",
        " ‾ ",
        "  ⸌",
        "  ⸊",
        "  |",
        "  ⁎",
        "  ⁕",
        " ෴ ",
        "  ⁓",
        "   ",
        "   ",
        "   "
      ]
    },
    "point": {
      "interval": 125,
      "frames": [
        "∙∙∙",
        "●∙∙",
        "∙●∙",
        "∙∙●",
        "∙∙∙"
      ]
    },
    "layer": {
      "interval": 150,
      "frames": [
        "-",
        "=",
        "≡"
      ]
    },
    "betaWave": {
      "interval": 80,
      "frames": [
        "ρββββββ",
        "βρβββββ",
        "ββρββββ",
        "βββρβββ",
        "ββββρββ",
        "βββββρβ",
        "ββββββρ"
      ]
    }
  }
#+end_src
